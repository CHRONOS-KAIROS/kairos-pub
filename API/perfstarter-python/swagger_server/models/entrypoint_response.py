# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EntrypointResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, request_id: str=None, content: object=None):  # noqa: E501
        """EntrypointResponse - a model defined in Swagger

        :param request_id: The request_id of this EntrypointResponse.  # noqa: E501
        :type request_id: str
        :param content: The content of this EntrypointResponse.  # noqa: E501
        :type content: object
        """
        self.swagger_types = {
            'request_id': str,
            'content': object
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'content': 'content'
        }
        self._request_id = request_id
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'EntrypointResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The entrypointResponse of this EntrypointResponse.  # noqa: E501
        :rtype: EntrypointResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self) -> str:
        """Gets the request_id of this EntrypointResponse.


        :return: The request_id of this EntrypointResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: str):
        """Sets the request_id of this EntrypointResponse.


        :param request_id: The request_id of this EntrypointResponse.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def content(self) -> object:
        """Gets the content of this EntrypointResponse.


        :return: The content of this EntrypointResponse.
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content: object):
        """Sets the content of this EntrypointResponse.


        :param content: The content of this EntrypointResponse.
        :type content: object
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content
