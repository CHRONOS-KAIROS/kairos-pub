# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EntrypointMessage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, sender: str=None, time: datetime=None, content: object=None, content_uri: str=None):  # noqa: E501
        """EntrypointMessage - a model defined in Swagger

        :param id: The id of this EntrypointMessage.  # noqa: E501
        :type id: str
        :param sender: The sender of this EntrypointMessage.  # noqa: E501
        :type sender: str
        :param time: The time of this EntrypointMessage.  # noqa: E501
        :type time: datetime
        :param content: The content of this EntrypointMessage.  # noqa: E501
        :type content: object
        :param content_uri: The content_uri of this EntrypointMessage.  # noqa: E501
        :type content_uri: str
        """
        self.swagger_types = {
            'id': str,
            'sender': str,
            'time': datetime,
            'content': object,
            'content_uri': str
        }

        self.attribute_map = {
            'id': 'id',
            'sender': 'sender',
            'time': 'time',
            'content': 'content',
            'content_uri': 'contentUri'
        }
        self._id = id
        self._sender = sender
        self._time = time
        self._content = content
        self._content_uri = content_uri

    @classmethod
    def from_dict(cls, dikt) -> 'EntrypointMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The entrypointMessage of this EntrypointMessage.  # noqa: E501
        :rtype: EntrypointMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this EntrypointMessage.


        :return: The id of this EntrypointMessage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this EntrypointMessage.


        :param id: The id of this EntrypointMessage.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def sender(self) -> str:
        """Gets the sender of this EntrypointMessage.


        :return: The sender of this EntrypointMessage.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender: str):
        """Sets the sender of this EntrypointMessage.


        :param sender: The sender of this EntrypointMessage.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def time(self) -> datetime:
        """Gets the time of this EntrypointMessage.


        :return: The time of this EntrypointMessage.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this EntrypointMessage.


        :param time: The time of this EntrypointMessage.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def content(self) -> object:
        """Gets the content of this EntrypointMessage.


        :return: The content of this EntrypointMessage.
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content: object):
        """Sets the content of this EntrypointMessage.


        :param content: The content of this EntrypointMessage.
        :type content: object
        """

        self._content = content

    @property
    def content_uri(self) -> str:
        """Gets the content_uri of this EntrypointMessage.


        :return: The content_uri of this EntrypointMessage.
        :rtype: str
        """
        return self._content_uri

    @content_uri.setter
    def content_uri(self, content_uri: str):
        """Sets the content_uri of this EntrypointMessage.


        :param content_uri: The content_uri of this EntrypointMessage.
        :type content_uri: str
        """

        self._content_uri = content_uri
