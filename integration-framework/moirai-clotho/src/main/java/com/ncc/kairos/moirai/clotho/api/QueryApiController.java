package com.ncc.kairos.moirai.clotho.api;

import com.ncc.kairos.moirai.clotho.interfaces.IGremlinDriver;
import com.ncc.kairos.moirai.clotho.model.SparqlQuery;
import com.ncc.kairos.moirai.clotho.tinkerpop.GremlinDriverSingleton;
import io.swagger.annotations.ApiParam;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import java.util.Optional;

/**
 * Controller Implementation of the QueryApi that is autogenerated by swagger-codegen.
 * Handles receiving a cypher query, passing it through to a Neo4JRepository, and returning the response
 *
 * @author ryan scott
 * @version 0.1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-09-20T07:40:09.127-04:00[America/New_York]")
@Controller
@RequestMapping("${openapi.moiraiClotho.base-path:}")
public class QueryApiController implements QueryApi {

    static Logger Log = LogManager.getLogger(QueryApiController.class);

    private final NativeWebRequest request;

    private IGremlinDriver driver;

    @org.springframework.beans.factory.annotation.Autowired
    public QueryApiController(NativeWebRequest request) {
        this.request = request;
    }

    @Override
    public Optional<NativeWebRequest> getRequest() {
        return Optional.ofNullable(request);
    }

    /**
     * Handles taking a sparql query from the request body querying the database.
     *
     * @param body The request body as json with a 'queryString' containing the sparql query.
     * @return String The response of the query.
     */
    @Override
    public ResponseEntity<String> sparqlQuery(@ApiParam("Query to passthrough item to add") @Valid @RequestBody SparqlQuery body) {
        HttpStatus responseStatus = HttpStatus.OK;
        String responseMessage;

        driver = GremlinDriverSingleton.getDriver();

        try {
            driver.open();

            responseMessage = driver.runSparqlQuery(body.getQueryString());
        } catch (Exception e) {
            Log.error(e);
            responseStatus = HttpStatus.INTERNAL_SERVER_ERROR;
            responseMessage = e.getMessage();
        }

        return new ResponseEntity<String>(responseMessage, responseStatus);

    }

    @Override
    public ResponseEntity<String> getSGraph(@NotNull @ApiParam(value = "Name of a graph hosted in Neptune DB - limits to 1500 results", required = true) 
            @Valid @RequestParam(value = "namedGraph", required = true) String namedGraph) {
        HttpStatus responseStatus = HttpStatus.OK;
        String responseMessage;

        driver = GremlinDriverSingleton.getDriver();

        try {
            driver.open();

            responseMessage = driver.getSGraph(namedGraph);
        } catch (Exception e) {
            Log.error(e);
            responseStatus = HttpStatus.INTERNAL_SERVER_ERROR;
            responseMessage = e.getMessage();
        }

        return new ResponseEntity<String>(responseMessage, responseStatus);
    }

    @Override
    public ResponseEntity<String> getEventList(@NotNull @ApiParam(value = "Name of a graph hosted in Neptune DB", required = true) 
            @Valid @RequestParam(value = "namedGraph", required = true) String namedGraph) {
        HttpStatus responseStatus = HttpStatus.OK;
        String responseMessage;

        driver = GremlinDriverSingleton.getDriver();

        try {
            driver.open();

            responseMessage = driver.getEventList(namedGraph);
        } catch (Exception e) {
            Log.error(e);
            responseStatus = HttpStatus.INTERNAL_SERVER_ERROR;
            responseMessage = e.getMessage();
        }

        return new ResponseEntity<String>(responseMessage, responseStatus);
    }

    @Override
    public ResponseEntity<String> getEventTree(@NotNull @ApiParam(value = "Name of a graph hosted in Neptune DB", required = true) 
    @Valid @RequestParam(value = "namedGraph", required = true) String namedGraph, @NotNull @ApiParam(value = "Name of a event in Neptune DB", required = true) @Valid @RequestParam(value = "eventName", required = true) String eventName) {
        HttpStatus responseStatus = HttpStatus.OK;
        String responseMessage;

        driver = GremlinDriverSingleton.getDriver();

        try {
            driver.open();

            responseMessage = driver.getEventTree(eventName, namedGraph);
        } catch (Exception e) {
            Log.error(e);
            responseStatus = HttpStatus.INTERNAL_SERVER_ERROR;
            responseMessage = e.getMessage();
        }

        return new ResponseEntity<String>(responseMessage, responseStatus);
    }

    @Override
    public ResponseEntity<String> getNamedGraphs() {
        HttpStatus responseStatus = HttpStatus.OK;
        String responseMessage;

        driver = GremlinDriverSingleton.getDriver();

        try {
            driver.open();

            responseMessage = driver.getNamedGraphs();
        } catch (Exception e) {
            Log.error(e);
            responseStatus = HttpStatus.INTERNAL_SERVER_ERROR;
            responseMessage = e.getMessage();
        }

        return new ResponseEntity<String>(responseMessage, responseStatus);
    }

    @Override 
    public ResponseEntity<String> deleteNamedGraph(@NotNull @ApiParam(value = "Name of a graph hosted in Neptune DB", required = true) @Valid @RequestParam(value = "namedGraph", required = true) String namedGraph) {
        HttpStatus responseStatus = HttpStatus.OK;
        String responseMessage;

        driver = GremlinDriverSingleton.getDriver();

        try {
            driver.open();

            responseMessage = driver.deleteNamedGraph(namedGraph);
        } catch (Exception e) {
            Log.error(e);
            responseStatus = HttpStatus.INTERNAL_SERVER_ERROR;
            responseMessage = e.getMessage();
        }

        return new ResponseEntity<String>(responseMessage, responseStatus);
    }

    @Override
    public ResponseEntity<String> getOffsetGraph(
        @Valid @RequestParam(value = "namedGraph", required = true) String namedGraph,
        @NotNull @ApiParam(value = "Integer offset", required = true) @Valid @RequestParam(value = "limit", required = true) Integer limit,
        @NotNull @ApiParam(value = "Integer offset", required = true) @Valid @RequestParam(value = "offset", required = true) Integer offset) {
            HttpStatus responseStatus = HttpStatus.OK;
            String responseMessage;
    
            driver = GremlinDriverSingleton.getDriver();
    
            try {
                driver.open();
    
                responseMessage = driver.getOffsetGraph(namedGraph, limit, offset);
            } catch (Exception e) {
                Log.error(e);
                responseStatus = HttpStatus.INTERNAL_SERVER_ERROR;
                responseMessage = e.getMessage();
            }
    
            return new ResponseEntity<String>(responseMessage, responseStatus);
    }

    @Override
    public ResponseEntity<String> saveOrUpdate(
        @NotNull @ApiParam(value = "Name of a graph hosted in Neptune DB", required = true) @Valid @RequestParam(value = "namedGraph", required = true) String namedGraph,
        @NotNull @ApiParam(value = "Name of event key to update", required = true) @Valid @RequestParam(value = "eventKey", required = true) String eventKey,
        @NotNull @ApiParam(value = "Value to persist to key", required = true) @Valid @RequestParam(value = "additionalInfo", required = true) String additionalInfo,
        @NotNull @ApiParam(value = "Value to persist to key", required = true) @Valid @RequestParam(value = "userName", required = true) String userName) {
        HttpStatus responseStatus = HttpStatus.OK;
            String responseMessage;
    
            driver = GremlinDriverSingleton.getDriver();
    
            try {
                driver.open();
    
                responseMessage = driver.saveOrUpdate(namedGraph, eventKey, additionalInfo, userName);
            } catch (Exception e) {
                Log.error(e);
                responseStatus = HttpStatus.INTERNAL_SERVER_ERROR;
                responseMessage = e.getMessage();
            }
    
            return new ResponseEntity<String>(responseMessage, responseStatus);
    }
}
