# coding: utf-8

{{>partial_header}}

import pprint
import re  # noqa: F401

import six


{{#models}}
{{#model}}
class {{classname}}(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """{{#allowableValues}}

    """
    allowed enum values
    """
{{#enumVars}}
    {{vendorExtensions.x-python-name-prefix}}{{name}} = {{{value}}}{{^-last}}
{{/-last}}
{{/enumVars}}{{/allowableValues}}

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
{{#vars}}
        '{{vendorExtensions.x-python-name-prefix}}{{name}}': '{{{dataType}}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }

    attribute_map = {
{{#vars}}
        '{{vendorExtensions.x-python-name-prefix}}{{name}}': '{{baseName}}'{{#hasMore}},{{/hasMore}}
{{/vars}}
    }
{{#discriminator}}

    discriminator_value_class_map = {
        {{#children}}'{{^vendorExtensions.x-discriminator-value}}{{vendorExtensions.x-python-name-prefix}}{{name}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{vendorExtensions.x-discriminator-value}}}{{/vendorExtensions.x-discriminator-value}}': '{{{classname}}}'{{^-last}},
        {{/-last}}{{/children}}
    }
{{/discriminator}}

    def __init__(self{{#vars}}, {{vendorExtensions.x-python-name-prefix}}{{name}}={{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/vars}}):  # noqa: E501
        """{{classname}} - a model defined in OpenAPI"""  # noqa: E501
{{#vars}}{{#-first}}
{{/-first}}
        self._{{vendorExtensions.x-python-name-prefix}}{{name}} = None
{{/vars}}
        self.discriminator = {{#discriminator}}'{{{discriminatorName}}}'{{/discriminator}}{{^discriminator}}None{{/discriminator}}
{{#vars}}{{#-first}}
{{/-first}}
{{#required}}
        self.{{vendorExtensions.x-python-name-prefix}}{{name}} = {{vendorExtensions.x-python-name-prefix}}{{name}}
{{/required}}
{{^required}}
{{#isNullable}}
        self.{{vendorExtensions.x-python-name-prefix}}{{name}} = {{vendorExtensions.x-python-name-prefix}}{{name}}
{{/isNullable}}
{{^isNullable}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is not None:
            self.{{vendorExtensions.x-python-name-prefix}}{{name}} = {{vendorExtensions.x-python-name-prefix}}{{name}}
{{/isNullable}}
{{/required}}
{{/vars}}

{{#vars}}
    @property
    def {{vendorExtensions.x-python-name-prefix}}{{name}}(self):
        """Gets the {{vendorExtensions.x-python-name-prefix}}{{name}} of this {{classname}}.  # noqa: E501

{{#description}}
        {{{description}}}  # noqa: E501
{{/description}}

        :return: The {{vendorExtensions.x-python-name-prefix}}{{name}} of this {{classname}}.  # noqa: E501
        :rtype: {{dataType}}
        """
        return self._{{vendorExtensions.x-python-name-prefix}}{{name}}

    @{{vendorExtensions.x-python-name-prefix}}{{name}}.setter
    def {{vendorExtensions.x-python-name-prefix}}{{name}}(self, {{vendorExtensions.x-python-name-prefix}}{{name}}):
        """Sets the {{vendorExtensions.x-python-name-prefix}}{{name}} of this {{classname}}.

{{#description}}
        {{{description}}}  # noqa: E501
{{/description}}

        :param {{vendorExtensions.x-python-name-prefix}}{{name}}: The {{vendorExtensions.x-python-name-prefix}}{{name}} of this {{classname}}.  # noqa: E501
        :type: {{dataType}}
        """
{{^isNullable}}
{{#required}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is None:
            raise ValueError("Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{name}}`, must not be `None`")  # noqa: E501
{{/required}}
{{/isNullable}}
{{#isEnum}}
{{#isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#items.isString}}"{{/items.isString}}{{{this}}}{{#items.isString}}"{{/items.isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
{{#isListContainer}}
        if not set({{vendorExtensions.x-python-name-prefix}}{{{name}}}).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `{{vendorExtensions.x-python-name-prefix}}{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{vendorExtensions.x-python-name-prefix}}{{{name}}}) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isListContainer}}
{{#isMapContainer}}
        if not set({{vendorExtensions.x-python-name-prefix}}{{{name}}}.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `{{vendorExtensions.x-python-name-prefix}}{{{name}}}` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set({{vendorExtensions.x-python-name-prefix}}{{{name}}}.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )
{{/isMapContainer}}
{{/isContainer}}
{{^isContainer}}
        allowed_values = [{{#allowableValues}}{{#values}}{{#isString}}"{{/isString}}{{{this}}}{{#isString}}"{{/isString}}{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}]  # noqa: E501
        if {{vendorExtensions.x-python-name-prefix}}{{{name}}} not in allowed_values:
            raise ValueError(
                "Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{{name}}}` ({0}), must be one of {1}"  # noqa: E501
                .format({{vendorExtensions.x-python-name-prefix}}{{{name}}}, allowed_values)
            )
{{/isContainer}}
{{/isEnum}}
{{^isEnum}}
{{#hasValidation}}
{{#maxLength}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is not None and len({{vendorExtensions.x-python-name-prefix}}{{name}}) > {{maxLength}}:
            raise ValueError("Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{name}}`, length must be less than or equal to `{{maxLength}}`")  # noqa: E501
{{/maxLength}}
{{#minLength}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is not None and len({{vendorExtensions.x-python-name-prefix}}{{name}}) < {{minLength}}:
            raise ValueError("Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{name}}`, length must be greater than or equal to `{{minLength}}`")  # noqa: E501
{{/minLength}}
{{#maximum}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is not None and {{vendorExtensions.x-python-name-prefix}}{{name}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:  # noqa: E501
            raise ValueError("Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{name}}`, must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}`{{maximum}}`")  # noqa: E501
{{/maximum}}
{{#minimum}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is not None and {{vendorExtensions.x-python-name-prefix}}{{name}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:  # noqa: E501
            raise ValueError("Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{name}}`, must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}`{{minimum}}`")  # noqa: E501
{{/minimum}}
{{#pattern}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is not None and not re.search(r'{{{vendorExtensions.x-regex}}}', {{vendorExtensions.x-python-name-prefix}}{{name}}{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}}):  # noqa: E501
            raise ValueError(r"Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{name}}`, must be a follow pattern or equal to `{{{pattern}}}`")  # noqa: E501
{{/pattern}}
{{#maxItems}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is not None and len({{vendorExtensions.x-python-name-prefix}}{{name}}) > {{maxItems}}:
            raise ValueError("Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{name}}`, number of items must be less than or equal to `{{maxItems}}`")  # noqa: E501
{{/maxItems}}
{{#minItems}}
        if {{vendorExtensions.x-python-name-prefix}}{{name}} is not None and len({{vendorExtensions.x-python-name-prefix}}{{name}}) < {{minItems}}:
            raise ValueError("Invalid value for `{{vendorExtensions.x-python-name-prefix}}{{name}}`, number of items must be greater than or equal to `{{minItems}}`")  # noqa: E501
{{/minItems}}
{{/hasValidation}}
{{/isEnum}}

        self._{{vendorExtensions.x-python-name-prefix}}{{name}} = {{vendorExtensions.x-python-name-prefix}}{{name}}

{{/vars}}
{{#discriminator}}
    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator]
        return self.discriminator_value_class_map.get(discriminator_value)

{{/discriminator}}
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, {{classname}}):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
{{/model}}
{{/models}}
