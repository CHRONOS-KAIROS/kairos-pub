---

- name: Launch instances on EC2
  local_action:
    module: ec2
    assign_public_ip: yes
    group_id: "{{ aws_sg_id }}"
    key_name: "{{ key_pair }}"
    instance_type: "{{ instance_type }}"
    instance_profile_name: "{{ instance_profile_name }}"
    image: "{{ ami }}"
    region: "{{ region }}"
    wait: yes
    exact_count: "{{ count }}"
    count_tag: "{{ count_tags }}"
    instance_tags: "{{ instance_tags }}"
    vpc_subnet_id: "{{ aws_subnet_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ root_volume_size }}"
        delete_on_termination: true
      - device_name: /dev/sdb
        volume_type: gp2
        volume_size: "{{ docker_volume_size }}"
        delete_on_termination: true
  register: ec2_instances

- name: debug instance start
  debug: 'msg="{{ec2_instances}}"'

- name: Gather new instances
  add_host:
    hostname: "{{ item.public_dns_name }}"
    groups: new_instances
  with_items: "{{ ec2_instances.instances }}"

- name: Debug new instance
  debug: "msg={{groups['new_instances']}}"
  when: groups['new_instances'] is defined

- name: set Facts for tagging
  set_fact:
    ec2_instances: "{{ ec2_instances.instances }}"
    first_instance: "{{ ec2_instances.instances[0].id }}"
    cacheable: true
  when: "ec2_instances.instances[0] is defined"
  
- name: set Facts for tagging
  set_fact:
    ec2_instances: "{{ ec2_instances.tagged_instances }}"
    first_instance: "{{ ec2_instances.tagged_instances[0].id }}"
    cacheable: true
  when: "ec2_instances.tagged_instances[0] is defined"

