plugins {
  id 'java'
}

apply plugin: 'java'
apply plugin: 'idea'
// apply plugin: 'checkstyle'

defaultTasks 'clean', 'build', 'buildDockerImage'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.11

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

test {
  useJUnitPlatform()
}

dependencies {
    //compile fileTree(dir: 'libs', include: '*.jar')
    //runtime fileTree(dir: 'libs', include: '*.jar')

    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'

    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-asl
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-lgpl
    compile group: 'org.codehaus.jackson', name: 'jackson-core-lgpl', version: '1.9.13'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.1'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '2.0.0-alpha1'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'

    // https://mvnrepository.com/artifact/log4j/log4j
    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.10.10'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.9'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}




jar {
  zip64 = true
  from('src') {
    include '**/*.xml'
  }
     
  manifest {
    attributes(
      'Main-Class': 'com.nextcentury.kairos.experimentstatus.ExperimentStatusEntryPoint'
    )
  } from { 
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

task buildDockerImage() {
    description 'Builds the Docker image.'
    doLast {
        // Concatenate the name and tag
        String local_name_and_tag = dockerRepositoryName + ":" + localVersion

        // Build Dockerfile Image
        println runCommand("docker build -t $local_name_and_tag -f $dockerFilename .")

        // Cleans any dangling images from the build
        // -f stand for force. Skips the prompt for confirmation
        println runCommand("docker container prune -f")
        println runCommand("docker builder prune -f")

    }
}

task deploy() {
    doLast {
        String password = runCommand("aws ecr get-login-password")
        runCommand("docker login --username AWS -p $password 130602597458.dkr.ecr.us-east-1.amazonaws.com")
        runCommand("docker tag experiment-status:latest 130602597458.dkr.ecr.us-east-1.amazonaws.com/kairos-runtimes:experiment-status-1.1")
        runCommand("docker push 130602597458.dkr.ecr.us-east-1.amazonaws.com/kairos-runtimes:experiment-status-1.1")
        runCommand("docker logout")
    }
}

String runCommand(String str) {
    println "[runCommand]: ${str}"
    String[] tstr = str.tokenize()
    runCommand(tstr)
}

String runCommand(String... args) {
    def proc = args.execute()
    proc.waitFor()
    String input = proc.in.readLines().join("\n")
    String errors = "[runCommand ERROR]: "+proc.err.readLines().join("\n[ERROR]: ")

    if (proc.exitValue() != 0) {
        println input
        println errors
        throw new Error("Exit value: "+proc.exitValue()+"\n Error: "+errors);
    }
    "$input"
}
