apply plugin: 'java'
//apply plugin: 'eclipse'

repositories {
    mavenCentral()
}

test {
  useJUnitPlatform()
}

dependencies {
    //compile fileTree(dir: 'libs', include: '*.jar')
    //runtime fileTree(dir: 'libs', include: '*.jar')

    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    implementation('org.apache.logging.log4j:log4j-api') {
        version {
            strictly '2.17.0'
        }
    }

   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    
    compile group: 'com.googlecode.json-simple', name:'json-simple', version: '1.1.1'

    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-asl
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-lgpl
    compile group: 'org.codehaus.jackson', name: 'jackson-core-lgpl', version: '1.9.13'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.1'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.1'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    compile 'commons-fileupload:commons-fileupload:1.4'

    // https://mvnrepository.com/artifact/joda-time/joda-time
    compile group: 'joda-time', name: 'joda-time', version: '2.10.10'

    // https://mvnrepository.com/artifact/org.redisson/redisson
    compile group: 'org.redisson', name: 'redisson', version: '3.15.0'

    // https://mvnrepository.com/artifact/org.elasticsearch.client/elasticsearch-rest-high-level-client
    compile group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: '7.11.1'

    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk
    compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.487'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.7.0'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-tools
    compile group: 'org.apache.kafka', name: 'kafka-tools', version: '2.7.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

}

defaultTasks 'clean', 'build', 'buildDockerImage'


sourceSets {
    main {
         java {
              srcDir 'src/main/java'
              }
         }
}


jar {
    zip64 = true
 from('src') {
        include '**/*.xml'
 }
     
 manifest {
   attributes(
      'Main-Class': 'com.nextcentury.kairos.MsgProcessorEntryPoint'
    )
  }  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}


task buildDockerImage() {
    description 'Builds the Docker image.'
    doLast {
        // Concatenate the name and tag
        String local_name_and_tag = dockerRepositoryName + ":" + version

        // Build Dockerfile Image
        println runCommand("docker build -t $local_name_and_tag -f $dockerFilename .")

        // Cleans any dangling images from the build
        // -f stand for force. Skips the prompt for confirmation
        println runCommand("docker container prune -f")
        println runCommand("docker builder prune -f")

    }
}

task deploy() {
    doLast {
        String password = runCommand("aws ecr get-login-password")
        runCommand("docker login --username AWS -p $password 130602597458.dkr.ecr.us-east-1.amazonaws.com")
        runCommand("docker tag msgprocessor:latest 130602597458.dkr.ecr.us-east-1.amazonaws.com/kairos-runtimes:msgprocessor-1.0")
        runCommand("docker push 130602597458.dkr.ecr.us-east-1.amazonaws.com/kairos-runtimes:msgprocessor-1.0")
        runCommand("docker logout")
    }
}

String runCommand(String str) {
    println "[runCommand]: ${str}"
    String[] tstr = str.tokenize()
    runCommand(tstr)
}

String runCommand(String... args) {
    def proc = args.execute()
    proc.waitFor()
    String input = proc.in.readLines().join("\n")
    String errors = "[runCommand ERROR]: "+proc.err.readLines().join("\n[ERROR]: ")

    if (proc.exitValue() != 0) {
        println input
        println errors
        throw new Error("Exit value: "+proc.exitValue()+"\n Error: "+errors);
    }
    "$input"
}