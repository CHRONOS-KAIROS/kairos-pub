package com.ncc.kairos.moirai.zeus.api;

import com.ncc.kairos.moirai.zeus.dao.ZeusSettingRepository;
import com.ncc.kairos.moirai.zeus.model.StringResponse;
import com.ncc.kairos.moirai.zeus.model.ZeusSetting;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.server.ResponseStatusException;

import javax.validation.Valid;
import java.util.Optional;
import java.util.List;

/**
 * Controller Implementation of the Files Api that is autogenerated by
 * swagger-codegen.
 *
 * @author Ryan Scott
 */
@Controller
@RequestMapping("${openapi.moiraiZeus.base-path:}")
public class SettingsApiController implements SettingsApi {

    private final NativeWebRequest request;

    @Autowired
    public SettingsApiController(NativeWebRequest request) {
        this.request = request;
    }

    public Optional<NativeWebRequest> getRequest() {
        return Optional.ofNullable(this.request);
    }

    @Autowired
    private ZeusSettingRepository zeusSettingRepository;

    @Override
    @PreAuthorize("hasAuthority('ADMIN')")
    public ResponseEntity<StringResponse> postZeusSettings(@ApiParam(value = "Post Zeus Settign"  )  @Valid @RequestBody ZeusSetting zeusSetting) {

        ZeusSetting existingSetting = zeusSettingRepository.findByName(zeusSetting.getName());
        System.out.println(existingSetting);
        if (existingSetting != null ) {
            existingSetting.setValue(zeusSetting.getValue());
            zeusSettingRepository.save(existingSetting);
        } else {
            zeusSettingRepository.save(zeusSetting);
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @Override
    public ResponseEntity<ZeusSetting> getZeusSetting(String id){
        ZeusSetting setting = zeusSettingRepository.findByName(id);
        if(setting == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Setting with name not found");
        }
        return new ResponseEntity<>(setting, HttpStatus.OK);
    }

    @Override
    @PreAuthorize("hasAuthority('ADMIN')")
    public ResponseEntity<List<ZeusSetting>> getZeusSettings() {
        List<ZeusSetting> settings = zeusSettingRepository.findAll();
        if(settings == null){
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Settings not found");
        }
        return new ResponseEntity<>(settings, HttpStatus.OK);
    }

    @Override
    @PreAuthorize("hasAuthority('ADMIN')")
    public ResponseEntity<StringResponse> deleteZeusSetting(String id) {
        try {
            zeusSettingRepository.deleteById(id);
        } catch (EmptyResultDataAccessException e) {
            //Do nothing
        } catch (Exception e) {
            throw new ResponseStatusException(
                HttpStatus.NOT_FOUND, "Can't delete object with ID that does not exist.", e);
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }
}
